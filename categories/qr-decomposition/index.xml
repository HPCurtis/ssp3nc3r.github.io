<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>QR decomposition on p( ssp3nc3r | Columbian )</title>
    <link>https://ssp3nc3r.github.io/categories/qr-decomposition/</link>
    <description>Recent content in QR decomposition on p( ssp3nc3r | Columbian )</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 16 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://ssp3nc3r.github.io/categories/qr-decomposition/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Speedy splines in Stan part one</title>
      <link>https://ssp3nc3r.github.io/post/speedy-splines-in-stan/</link>
      <pubDate>Wed, 16 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://ssp3nc3r.github.io/post/speedy-splines-in-stan/</guid>
      <description>Milad Kharratzadeh provides a helpful case study on estimating splines in Stan. We can improve on his work with a few tricks to speed up the estimation process. Namely, if we decompose the spline matrix using QR decomposition, we speed up Stan’s fitting process by at least an order of magnitude.
Here’s how we can alter the code to accommodate splines with a few tricks to speed things up:</description>
    </item>
    
  </channel>
</rss>
