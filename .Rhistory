geom_sf_interactive(
data = mutate(d, neighborhood = gsub("'", "&#39;", neighborhood)),
mapping = aes(
fill = as.numeric(trees_area),
tooltip = tooltip,
data_id = neighborhood
),
color = 'gray',
lwd = 0.1
) +
scale_fill_gradient(
name = expression(Trees / hm^2),
low = "#C19A6B",
high = "#008800",
na.value = "#888888"
) +
labs(
caption = "Source: NYC OpenData, Tree Census 2015"
)
girafe(
ggobj = p,
width_svg = 12,
height_svg = 8,
options = list(
opts_tooltip(css = str_c(
'padding:5px;',
'background:rgba(255, 255, 255, 0.9);',
'border-radius:2px 2px 2px 2px;')
),
opts_hover(css = 'stroke-width:2;')
)
)
# save and load the geojson as a spatial polygon data frame
if( !file.exists(map_file) ) {
url <- str_c(
'https://ssp3nc3r.github.io/',
'20213APAN5800K007/data/betanyc_hoods.geojson'
)
spdf <- st_read(url)
saveRDS(spdf, map_file, compress = 'xz')
} else {
spdf <- readRDS(map_file)
}
if ( !file.exists('data/trees.rds') ) {
url <- str_c(
'https://ssp3nc3r.github.io/',
'20213APAN5800K007/data/trees.rds'
)
download.file(url, 'data/trees.rds')
}
if ( !file.exists('data/trees.rds') ) {
url <- str_c(
'https://ssp3nc3r.github.io/',
'20213APAN5800K007/data/trees.rds'
)
download.file(url, 'data/trees.rds')
}
trees <-
readRDS("data/trees.rds")  %>%
filter(
status == "Alive",
tree_dbh > 0,
!is.na(neighborhood)) %>%
group_by(neighborhood, spc_common, spc_latin) %>%
summarise(
spc_n = n(),
spc_diam_median = quantile(tree_dbh, probs = 0.1, na.rm = TRUE, names = FALSE),
spc_diam_sd = sd(tree_dbh)
) %>%
ungroup()
d <-
st_as_sf(spdf) %>%
mutate(area = st_area(d)) %>%
group_by(neighborhood) %>%
mutate(area = sum(area)) %>%
ungroup() %>%
mutate(area = units::set_units(area, hm^2)) %>%
left_join(
trees %>%
group_by(neighborhood) %>%
summarise(
trees_n = sum(spc_n)
)
) %>%
mutate(trees_area = round(trees_n / area, digits = 1)) %>%
rowwise() %>%
mutate(tooltip = tooltip_table( tibble(borough, neighborhood, trees_n, trees_area) ) ) %>%
ungroup()
d <-
st_as_sf(spdf) %>%
mutate(area = st_area(spdf)) %>%
group_by(neighborhood) %>%
mutate(area = sum(area)) %>%
ungroup() %>%
mutate(area = units::set_units(area, hm^2)) %>%
left_join(
trees %>%
group_by(neighborhood) %>%
summarise(
trees_n = sum(spc_n)
)
) %>%
mutate(trees_area = round(trees_n / area, digits = 1)) %>%
rowwise() %>%
mutate(tooltip = tooltip_table( tibble(borough, neighborhood, trees_n, trees_area) ) ) %>%
ungroup()
p <-
ggplot() +
theme_void() +
theme(
panel.background = element_rect(fill = '#ffffff')
) +
geom_sf_interactive(
data = mutate(d, neighborhood = gsub("'", "&#39;", neighborhood)),
mapping = aes(
fill = as.numeric(trees_area),
tooltip = tooltip,
data_id = neighborhood
),
color = 'gray',
lwd = 0.1
) +
scale_fill_gradient(
name = expression(Trees / hm^2),
low = "#C19A6B",
high = "#008800",
na.value = "#888888"
) +
labs(
caption = "Source: NYC OpenData, Tree Census 2015"
)
girafe(
ggobj = p,
width_svg = 12,
height_svg = 8,
options = list(
opts_tooltip(css = str_c(
'padding:5px;',
'background:rgba(255, 255, 255, 0.9);',
'border-radius:2px 2px 2px 2px;')
),
opts_hover(css = 'stroke-width:2;')
)
)
library(ggplot2)
library(flextable)
library(ggiraph)
data(list = 'elements', package = 'rbokeh')
install.packages("rbokeh")
library(ggplot2)
library(flextable)
library(ggiraph)
data(list = 'elements', package = 'rbokeh')
element_type <- c(
"alkali metal", "alkaline earth metal", "halogen", "metal",
"metalloid", "noble gas", "nonmetal", "transition metal")
element_color <- c(
"#a6cee3", "#1f78b4", "#fdbf6f", "#b2df8a",
"#33a02c", "#bbbb88", "#baa2a6", "#e08e79")
elements <-
elements %>%
filter( !is.na(group) ) %>%
mutate(
across(.cols = group:atomic.mass, as.character),
atomic.mass = if_else(symbol == "Uus", " ", atomic.mass),
color = element_color[match(metal, element_type)],
type = metal
)
flextable(elements)
tooltip_table <- function(...) {
data.frame(...) %>%
mutate( across(.cols = everything(), as.character) ) %>%
pivot_longer(cols = everything(), names_to = 'P', values_to = 'V') %>%
flextable(col_keys = c('P', 'V')) %>%
set_header_labels( P = '', V = '' ) %>%
fontsize(size = 8, part = 'all') %>%
line_spacing(space = 5, unit = 'mm', part = 'all') %>%
set_table_properties(layout = 'autofit') %>%
theme_alafoli() %>%
htmltools_value(ft.shadow = FALSE) %>%
as.character()
}
elements <-
elements %>%
rowwise() %>%
mutate(tooltip = tooltip_table(
name, type, atomic.mass, density, electronic.configuration,
boiling.point, melting.point, bonding.type)
) %>%
ungroup()
p <-
elements %>%
ggplot(
mapping = aes(group, period)
) +
theme_void() +
coord_equal() +
scale_x_discrete(limits = factor(1:18) ) +
scale_y_discrete(limits = factor(7:1) ) +
scale_fill_identity() +
# base color of each element square
geom_tile(
mapping = aes(
fill = color,
),
alpha = 0.6,
width = 1,
height = 1,
color = '#ffffff',
lwd = 0.3
) +
# add symbol to each square
geom_text_interactive(
mapping = aes(
label = symbol,
data_id = atomic.number
),
size = 7/.pt,
hjust = 0,
vjust = 0.5,
nudge_x = -0.4,
nudge_y = 0.04,
fontface = 'bold'
) +
# add atomic number to each square
geom_text_interactive(
mapping = aes(
label = atomic.number,
data_id = atomic.number
),
size = 4/.pt,
hjust = 0,
vjust = 0.5,
nudge_x = -0.4,
nudge_y = 0.35
) +
# add name to each square
geom_text_interactive(
mapping = aes(
label = name,
data_id = atomic.number
),
size = 3/.pt,
hjust = 0,
vjust = 0.5,
nudge_x = -0.4,
nudge_y = -0.2
) +
# add atomic mass to each square
geom_text_interactive(
mapping = aes(
label = atomic.mass,
data_id = atomic.number
),
size = 3/.pt,
hjust = 0,
vjust = 0.5,
nudge_x = -0.4,
nudge_y = -0.35
) +
# for mouseover, set alpha very low
geom_tile_interactive(
mapping = aes(
fill = color,
data_id = atomic.number,
tooltip = tooltip
),
alpha = 0.01,
width = 1,
height = 1,
color = '#ffffff',
lwd = 0.3
)
girafe(
ggobj = p,
options = list(
opts_hover(
css = 'fill-width:3;'),
opts_hover_inv(
css = 'fill-opacity:0.2;'),
opts_tooltip(
css = str_c(
'background-color:white;',
'color:black;',
'font-size:8pt;',
'padding:10px;'
),
offx = 10,
offy = 10
)
)
)
blogdown:::serve_site()
knitr::kable(elements)
names(elements)
class(elements)
type(elements)
sapply(elements, class)
flextable(sapply(elements, class))
flextable(sapply(elements, class) %>% data.frame)
cbind(names(elements), sapply(elements, class)) %>% data.frame
cbind(names(elements), sapply(elements, class)) %>% data.frame %>% flextable()
cbind(names(elements), sapply(elements, class)) %>%
data.frame %>%
flextable(col_keys = c('P', 'V')) %>%
set_header_labels( X1 = 'Variable', X2 = 'Type' )
cbind(names(elements), sapply(elements, class)) %>%
data.frame %>%
flextable(col_keys = c('X1', 'X2')) %>%
set_header_labels( X1 = 'Variable', X2 = 'Type' )
blogdown:::serve_site()
flextable::color()
?flextable::color
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE,
cache = FALSE,
eval = TRUE)
cbind(names(elements), sapply(elements, class)) %>%
data.frame %>%
flextable(col_keys = c('X1', 'X2')) %>%
set_header_labels( X1 = 'Variable', X2 = 'Type' ) %>%
color(color = '#555555', part = 'all')
blogdown::check_config()
blogdown:::update_meta_addin()
blogdown:::serve_site()
?blogdown::build_site
?blogdown::build_site(build_rmd = TRUE)
blogdown::build_site(build_rmd = TRUE)
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE,
cache = FALSE,
eval = TRUE)
library(tidyverse)
library(flextable)
library(ggiraph)
data(list = 'elements', package = 'rbokeh')
element_type <- c(
"alkali metal", "alkaline earth metal", "halogen", "metal",
"metalloid", "noble gas", "nonmetal", "transition metal")
element_color <- c(
"#a6cee3", "#1f78b4", "#fdbf6f", "#b2df8a",
"#33a02c", "#bbbb88", "#baa2a6", "#e08e79")
elements <-
elements %>%
filter( !is.na(group) ) %>%
mutate(
across(.cols = group:atomic.mass, as.character),
atomic.mass = if_else(symbol == "Uus", " ", atomic.mass),
color = element_color[match(metal, element_type)],
type = metal
)
cbind(names(elements), sapply(elements, class)) %>%
data.frame %>%
flextable(col_keys = c('X1', 'X2')) %>%
set_header_labels( X1 = 'Variable', X2 = 'Type' ) %>%
color(color = '#777777', part = 'all')
tooltip_table <- function(...) {
data.frame(...) %>%
mutate( across(.cols = everything(), as.character) ) %>%
pivot_longer(cols = everything(), names_to = 'P', values_to = 'V') %>%
flextable(col_keys = c('P', 'V')) %>%
set_header_labels( P = '', V = '' ) %>%
fontsize(size = 8, part = 'all') %>%
line_spacing(space = 5, unit = 'mm', part = 'all') %>%
set_table_properties(layout = 'autofit') %>%
theme_alafoli() %>%
htmltools_value(ft.shadow = FALSE) %>%
as.character()
}
elements <-
elements %>%
rowwise() %>%
mutate(tooltip = tooltip_table(
name, type, atomic.mass, density, electronic.configuration,
boiling.point, melting.point, bonding.type)
) %>%
ungroup()
p <-
elements %>%
ggplot(
mapping = aes(group, period)
) +
theme_void() +
coord_equal() +
scale_x_discrete(limits = factor(1:18) ) +
scale_y_discrete(limits = factor(7:1) ) +
scale_fill_identity() +
# base color of each element square
geom_tile(
mapping = aes(
fill = color,
),
alpha = 0.6,
width = 1,
height = 1,
color = '#ffffff',
lwd = 0.3
) +
# add symbol to each square
geom_text_interactive(
mapping = aes(
label = symbol,
data_id = atomic.number
),
size = 7/.pt,
hjust = 0,
vjust = 0.5,
nudge_x = -0.4,
nudge_y = 0.04,
fontface = 'bold'
) +
# add atomic number to each square
geom_text_interactive(
mapping = aes(
label = atomic.number,
data_id = atomic.number
),
size = 4/.pt,
hjust = 0,
vjust = 0.5,
nudge_x = -0.4,
nudge_y = 0.35
) +
# add name to each square
geom_text_interactive(
mapping = aes(
label = name,
data_id = atomic.number
),
size = 3/.pt,
hjust = 0,
vjust = 0.5,
nudge_x = -0.4,
nudge_y = -0.2
) +
# add atomic mass to each square
geom_text_interactive(
mapping = aes(
label = atomic.mass,
data_id = atomic.number
),
size = 3/.pt,
hjust = 0,
vjust = 0.5,
nudge_x = -0.4,
nudge_y = -0.35
) +
# for mouseover, set alpha very low
geom_tile_interactive(
mapping = aes(
fill = color,
data_id = atomic.number,
tooltip = tooltip
),
alpha = 0.01,
width = 1,
height = 1,
color = '#ffffff',
lwd = 0.3
)
girafe(
ggobj = p,
options = list(
opts_hover(
css = 'fill-width:3;'),
opts_hover_inv(
css = 'fill-opacity:0.2;'),
opts_tooltip(
css = str_c(
'background-color:white;',
'color:black;',
'font-size:8pt;',
'padding:10px;'
),
offx = 10,
offy = 10
)
)
)
?theme_alafoli
get_flextable_defaults()
girafe(
ggobj = p,
options = list(
opts_hover(
css = 'fill-width:3;'),
opts_hover_inv(
css = 'fill-opacity:0.2;'),
opts_tooltip(
css = str_c(
'background-color:white;',
'color:black;',
'font:Helvetica',
'font-size:8pt;',
'padding:10px;'
),
offx = 10,
offy = 10
)
)
)
install.packages(c("bench", "brio", "cpp11", "credentials", "devtools", "fs", "ggdist", "glue", "gmailr", "pkgbuild", "pkgload", "readr", "remotes", "stringi", "vroom", "withr", "xml2"))
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
