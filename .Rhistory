blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
citation("HSLuv")
citation("ggSankeyGrad")
blogdown:::new_post_addin()
# How might the probability, or uncertainty, of winning affect attendance?
# load libraries
library(dplyr)          # organize data
library(odds.converter) # calculate betting percentages
library(rstanarm)       # fit model
library(ggplot2)        # make graphic
library(ggthemes)       # tufte theme settings on graphic
library(latex2exp)      # format latex equations on graphic
# prepare data
betting <- pinnacle.data::MLB2016 %>% # betting data available in package pinnacle.data
tidyr::unnest() %>%                 # convert nested list to data.frame
group_by(GameID) %>%                # there are multiple betting data per game, so
arrange(EventDateTimeUTC) %>%       # arrange in time bets placed
slice(n()) %>%                      # and only keep last betting odds in each game
ungroup()                           # generally good to ungroup what you've grouped
# load and setup data from retrosheet gamelogs, 2016
# gamelog: https://www.retrosheet.org/gamelogs/index.html
# header to gamelog columns:
# https://raw.githubusercontent.com/maxtoki/baseball_R/master/data/game_log_header.csv
GL2016 <- read.csv("GL2016.csv", header = FALSE, stringsAsFactors = FALSE)
gamelog_header <- read.csv("gamelog_header.csv")
names(GL2016) <- names(gamelog_header)
GL2016 <- GL2016 %>%
mutate(GameID = paste0(HomeTeam, Date, DoubleHeader))
# combine attendance data in gamelogs with betting data from Pinnacle
df <- inner_join(betting, GL2016,
by = c("GameID" = "GameID"))
df <- df %>% arrange(GameID)
# Filter data for Dodgers' home games; calculate win percentage
dodgers2016 <- df %>%
filter(HomeTeam.y == "LAN") %>% # only consider Dodgers home games
select(Date, Attendence, MoneyUS1, MoneyUS2,  # filter only columns plan to use
DayOfWeek, DayNight, FinalScoreHome, FinalScoreAway) %>%
mutate(is_win = FinalScoreHome > FinalScoreAway) %>% # calculate flag whether Dodgers won
mutate(winpct = cumsum(is_win) / row_number()) %>% # calculate win percent
mutate(winpct = lag(winpct)) %>% # get win percent of to prior game
filter(complete.cases(winpct))
# Calculate betters probability of Dodgers winning home games
dodgers2016$Pr_win <- 1 - with(dodgers2016, {
Pr <- t(apply(cbind(MoneyUS1, MoneyUS2), 1, FUN = odds.us2prob))
Pr <- Pr / rowSums(Pr)
Pr[,1]
})
# expect relationship between attendance and probability of a win to be
# nonlinear. Create second variable for model to have quadratic equation:
# attendance = <other stuff> + Pr_wins + Pr_wins ^ 2
dodgers2016$Pr_win2 <- dodgers2016$Pr_win * dodgers2016$Pr_win
# Model effect of uncertainty on attendance
fit <- stan_glm(Attendence ~ 1 + DayOfWeek + DayNight + winpct + Pr_win + Pr_win2,
data = dodgers2016,
cores = 4, chains = 4)
# Get posterior of predictors
post <- data.frame(fit)
# Calculate probability of winning that maximizes marginal contribution to attendance
# which occurs where the partical derivative of those variables are zero
# I.e., set 0 = derivative of Pr_win + Pr_win^2 with respect to wins is
# -Pr_win / (2 * Pr_win2)
uncertainty <- with(post, (-Pr_win) / (Pr_win2 * 2))
# helper function to format decimal points on graphic
scaleFUN <- function(x) sprintf("%.2f", x)
# Math equation in latex describing the model
eqn <- paste0("$Normal(\\theta, \\sigma)$" , ", ",
"$\\theta \\sim \\alpha_1 \\cdot day + \\alpha_2 \\cdot time + ",
"\\beta_1 \\cdot \\frac{\\sum wins}{\\sum games} + ",
"\\beta_2 \\cdot p(win) + \\beta_3 \\cdot p(win)^2$")
# Math equation describing calculation of maximum
eqn2 <- paste0("$Maximum = \\frac{-\\beta_2}{2 \\cdot \\beta_3}$")
# plot base graphic for self to see data
ggplot(x = uncertainty) +
geom_density(aes(uncertainty),
fill = "#bbbbbb",
color = "#aaaaaa") +
scale_x_continuous(limits = c(0, 1))
# plot graphic with annotations for specific audience
ggplot(x = uncertainty) +
# data-ink
geom_density(aes(uncertainty),
fill = "#bbbbbb",
color = "#aaaaaa") +
# non-data ink
# change default theme attributes
theme_tufte(base_family = "sans") +
# cut off impossible values (probability < 0 or > 1), set x tick labels at specific amounts relevant
# to understanding, and format them only to two digits
scale_x_continuous(limits = c(0, 1),
breaks = c(0,
.5,
quantile(uncertainty,
probs = c(.1, .5, .9)),
1),
labels = scaleFUN) +
# just to remove padding above, below data
scale_y_continuous(expand = c(0, 0)) +
# various labels and annotations
# lighten lower quantile of data
annotate("rect",
xmin = 0,
ymin = 0,
xmax = quantile(uncertainty, probs = .1),
ymax = 5,
fill = "#ffffff",
alpha = .5) +
# lighten upper quantile of data
annotate("rect",
xmin = quantile(uncertainty, probs = .9),
ymin = 0,
xmax = 1,
ymax = 5,
fill = "#ffffff",
alpha = .5) +
# Draw vertical white lines on quantiles
geom_vline(xintercept = quantile(uncertainty,
probs = c(.1, .5, .9)),
color = "#ffffff") +
# draw vertical blue line on 50% or coin flip and label it as such
geom_vline(xintercept = .5,
color = "#407AAA",
linetype = "dashed") +
annotate("text",
x = .496,
y = 4.2,
label = "coin",
size = 5,
color = "#000000",
hjust = 1,
fontface = "bold") +
annotate("text",
x = .496,
y = 4,
label = "loss",
size = 5,
color = "#407AAA",
hjust = 1,
fontface = "bold") +
annotate("text",
x = .504,
y = 4.2,
label = "flip",
size = 5,
color = "#000000",
hjust = 0,
fontface = "bold") +
annotate("text",
x = .504,
y = 4,
label = "win",
size = 5,
color = "#407AAA",
hjust = 0,
fontface = "bold") +
# annotate median of probability
annotate("text",
x = median(uncertainty) + .01,
y = .5,
label = "Probability of\nteam win for\nmaximum attendance",
hjust = 0,
size = 2.5,
fontface = "bold",
lineheight = .8) +
# annotate equations
annotate("text",
x = 0, y = 1,
label = TeX(eqn),
size = 2.8,
color = "#aaaaaa",
hjust = 0) +
annotate("text",
x = 0,
y = 0.5,
label=TeX(eqn2),
size = 2.8,
color = "#aaaaaa",
hjust = 0) +
# additional overall theme (non-data-ink) changes
theme(axis.ticks = element_blank(),
axis.text.y = element_blank(),
axis.text.x = element_text(size = 12, face = "bold", color = "#666666"),
axis.title.y = element_blank(),
plot.title = element_text(size = 14, color = "#888888", face = "bold"),
plot.subtitle = element_text(size = 11, color = "#999999", face = "italic"),
plot.caption = element_text(size = 8, color = "#888888")) +
# labeling for graphic
labs(x = "",
title = paste0("More fans generally pay admission to our games when\n",
"the chance of winning was near a median of ",
signif(median(uncertainty), 2), "."),
subtitle = "Fans want favorable odds without predicting the outcome.",
caption = "Sources: Pinnacle betting data, 2016; Retrosheet Gamelogs, 2016")
# NOTE: after rendering graphic, resize preview window until satisfied with
# text and positioning of components, then save as PDF portrait using device size
blogdown:::new_post_addin()
library(knitr)
opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE, error=FALSE)
library(dplyr)          # organize data
library(odds.converter) # calculate betting percentages
library(rstanarm)       # fit model
library(ggplot2)        # make graphic
library(ggthemes)       # tufte theme settings on graphic
library(latex2exp)      # format latex equations on graphic
betting <- pinnacle.data::MLB2016 %>% # betting data available in package pinnacle.data
tidyr::unnest() %>%                 # convert nested list to data.frame
group_by(GameID) %>%                # there are multiple betting data per game, so
arrange(EventDateTimeUTC) %>%       # arrange in time bets placed
slice(n()) %>%                      # and only keep last betting odds in each game
ungroup()                           # generally good to ungroup what you've grouped
GL2016 <- read.csv("GL2016.csv", header = FALSE, stringsAsFactors = FALSE)
GL2016 <- read.csv("data/GL2016.csv", header = FALSE, stringsAsFactors = FALSE)
getwd()
GL2016 <- read.csv("data/GL2016.csv", header = FALSE, stringsAsFactors = FALSE)
library(readr)
GL2016 <- read_csv("data/GL2016.csv")
View(GL2016)
GL2016 <- read.csv("data/GL2016.csv", header = FALSE, stringsAsFactors = FALSE)
getwd()
GL2016 <- read.csv("../../data/GL2016.csv", header = FALSE, stringsAsFactors = FALSE)
gamelog_header <- read.csv("../../data/gamelog_header.csv")
names(GL2016) <- names(gamelog_header)
GL2016 <- GL2016 %>%
mutate(GameID = paste0(HomeTeam, Date, DoubleHeader))
df <- inner_join(betting, GL2016,
by = c("GameID" = "GameID"))
df <- df %>% arrange(GameID)
dodgers2016 <- df %>%
filter(HomeTeam.y == "LAN") %>% # only consider Dodgers home games
select(Date, Attendence, MoneyUS1, MoneyUS2,  # filter only columns plan to use
DayOfWeek, DayNight, FinalScoreHome, FinalScoreAway) %>%
mutate(is_win = FinalScoreHome > FinalScoreAway) %>% # calculate flag whether Dodgers won
mutate(winpct = cumsum(is_win) / row_number()) %>% # calculate win percent
mutate(winpct = lag(winpct)) %>% # get win percent of to prior game
filter(complete.cases(winpct))
dodgers2016$Pr_win <- 1 - with(dodgers2016, {
Pr <- t(apply(cbind(MoneyUS1, MoneyUS2), 1, FUN = odds.us2prob))
Pr <- Pr / rowSums(Pr)
Pr[,1]
})
dodgers2016$Pr_win2 <- dodgers2016$Pr_win * dodgers2016$Pr_win
fit <- stan_glm(Attendence ~ 1 + DayOfWeek + DayNight + winpct + Pr_win + Pr_win2,
data = dodgers2016,
cores = 4, chains = 4)
post <- data.frame(fit)
uncertainty <- with(post, (-Pr_win) / (Pr_win2 * 2))
scaleFUN <- function(x) sprintf("%.2f", x)
eqn <- paste0("$Normal(\\theta, \\sigma)$" , ", ",
"$\\theta \\sim \\alpha_1 \\cdot day + \\alpha_2 \\cdot time + ",
"\\beta_1 \\cdot \\frac{\\sum wins}{\\sum games} + ",
"\\beta_2 \\cdot p(win) + \\beta_3 \\cdot p(win)^2$")
eqn2 <- paste0("$Maximum = \\frac{-\\beta_2}{2 \\cdot \\beta_3}$")
# plot base graphic for self to see data
ggplot(x = uncertainty) +
geom_density(aes(uncertainty),
fill = "#bbbbbb",
color = "#aaaaaa") +
scale_x_continuous(limits = c(0, 1))
# plot graphic with annotations for specific audience
ggplot(x = uncertainty) +
# data-ink
geom_density(aes(uncertainty),
fill = "#bbbbbb",
color = "#aaaaaa") +
# non-data ink
# change default theme attributes
theme_tufte(base_family = "sans") +
# cut off impossible values (probability < 0 or > 1), set x tick labels at specific amounts relevant
# to understanding, and format them only to two digits
scale_x_continuous(limits = c(0, 1),
breaks = c(0,
.5,
quantile(uncertainty,
probs = c(.1, .5, .9)),
1),
labels = scaleFUN) +
# just to remove padding above, below data
scale_y_continuous(expand = c(0, 0)) +
# various labels and annotations
# lighten lower quantile of data
annotate("rect",
xmin = 0,
ymin = 0,
xmax = quantile(uncertainty, probs = .1),
ymax = 5,
fill = "#ffffff",
alpha = .5) +
# lighten upper quantile of data
annotate("rect",
xmin = quantile(uncertainty, probs = .9),
ymin = 0,
xmax = 1,
ymax = 5,
fill = "#ffffff",
alpha = .5) +
# Draw vertical white lines on quantiles
geom_vline(xintercept = quantile(uncertainty,
probs = c(.1, .5, .9)),
color = "#ffffff") +
# draw vertical blue line on 50% or coin flip and label it as such
geom_vline(xintercept = .5,
color = "#407AAA",
linetype = "dashed") +
annotate("text",
x = .496,
y = 4.2,
label = "coin",
size = 5,
color = "#000000",
hjust = 1,
fontface = "bold") +
annotate("text",
x = .496,
y = 4,
label = "loss",
size = 5,
color = "#407AAA",
hjust = 1,
fontface = "bold") +
annotate("text",
x = .504,
y = 4.2,
label = "flip",
size = 5,
color = "#000000",
hjust = 0,
fontface = "bold") +
annotate("text",
x = .504,
y = 4,
label = "win",
size = 5,
color = "#407AAA",
hjust = 0,
fontface = "bold") +
# annotate median of probability
annotate("text",
x = median(uncertainty) + .01,
y = .5,
label = "Probability of\nteam win for\nmaximum attendance",
hjust = 0,
size = 2.5,
fontface = "bold",
lineheight = .8) +
# annotate equations
annotate("text",
x = 0, y = 1,
label = TeX(eqn),
size = 2.8,
color = "#aaaaaa",
hjust = 0) +
annotate("text",
x = 0,
y = 0.5,
label=TeX(eqn2),
size = 2.8,
color = "#aaaaaa",
hjust = 0) +
# additional overall theme (non-data-ink) changes
theme(axis.ticks = element_blank(),
axis.text.y = element_blank(),
axis.text.x = element_text(size = 12, face = "bold", color = "#666666"),
axis.title.y = element_blank(),
plot.title = element_text(size = 14, color = "#888888", face = "bold"),
plot.subtitle = element_text(size = 11, color = "#999999", face = "italic"),
plot.caption = element_text(size = 8, color = "#888888")) +
# labeling for graphic
labs(x = "",
title = paste0("More fans generally pay admission to our games when\n",
"the chance of winning was near a median of ",
signif(median(uncertainty), 2), "."),
subtitle = "Fans want favorable odds without predicting the outcome.",
caption = "Sources: Pinnacle betting data, 2016; Retrosheet Gamelogs, 2016")
# plot graphic with annotations for specific audience
ggplot(x = uncertainty) +
# data-ink
geom_density(aes(uncertainty),
fill = "#bbbbbb",
color = "#aaaaaa") +
# non-data ink
# change default theme attributes
theme_tufte(base_family = "sans") +
# cut off impossible values (probability < 0 or > 1), set x tick labels at specific amounts relevant
# to understanding, and format them only to two digits
scale_x_continuous(limits = c(0, 1),
breaks = c(0,
.5,
quantile(uncertainty,
probs = c(.1, .5, .9)),
1),
labels = scaleFUN) +
# just to remove padding above, below data
scale_y_continuous(expand = c(0, 0)) +
# various labels and annotations
# lighten lower quantile of data
annotate("rect",
xmin = 0,
ymin = 0,
xmax = quantile(uncertainty, probs = .1),
ymax = 5,
fill = "#ffffff",
alpha = .5) +
# lighten upper quantile of data
annotate("rect",
xmin = quantile(uncertainty, probs = .9),
ymin = 0,
xmax = 1,
ymax = 5,
fill = "#ffffff",
alpha = .5) +
# Draw vertical white lines on quantiles
geom_vline(xintercept = quantile(uncertainty,
probs = c(.1, .5, .9)),
color = "#ffffff") +
# draw vertical blue line on 50% or coin flip and label it as such
geom_vline(xintercept = .5,
color = "#407AAA",
linetype = "dashed") +
annotate("text",
x = .496,
y = 4.2,
label = "coin",
size = 5,
color = "#000000",
hjust = 1,
fontface = "bold") +
annotate("text",
x = .496,
y = 4,
label = "loss",
size = 5,
color = "#407AAA",
hjust = 1,
fontface = "bold") +
annotate("text",
x = .504,
y = 4.2,
label = "flip",
size = 5,
color = "#000000",
hjust = 0,
fontface = "bold") +
annotate("text",
x = .504,
y = 4,
label = "win",
size = 5,
color = "#407AAA",
hjust = 0,
fontface = "bold") +
# annotate median of probability
annotate("text",
x = median(uncertainty) + .01,
y = .5,
label = "Probability of\nteam win for\nmaximum attendance",
hjust = 0,
size = 2.5,
fontface = "bold",
lineheight = .8) +
# annotate equations
annotate("text",
x = 0, y = 1,
label = TeX(eqn),
size = 2.8,
color = "#aaaaaa",
hjust = 0) +
annotate("text",
x = 0,
y = 0.5,
label=TeX(eqn2),
size = 2.8,
color = "#aaaaaa",
hjust = 0) +
# additional overall theme (non-data-ink) changes
theme(axis.ticks = element_blank(),
axis.text.y = element_blank(),
axis.text.x = element_text(size = 12, face = "bold", color = "#666666"),
axis.title.y = element_blank(),
plot.title = element_text(size = 14, color = "#888888", face = "bold"),
plot.subtitle = element_text(size = 11, color = "#999999", face = "italic"),
plot.caption = element_text(size = 8, color = "#888888")) +
# labeling for graphic
labs(x = "",
title = paste0("More fans generally pay admission to our games when\n",
"the chance of winning was near a median of ",
signif(median(uncertainty), 2), "."),
subtitle = "Fans want favorable odds without predicting the outcome.",
caption = "Sources: Pinnacle betting data, 2016; Retrosheet Gamelogs, 2016")
quantile(uncertainty,
probs = c(.1, .5, .9)
)
quantile(uncertainty, probs = 0.5)
round(quantile(uncertainty, probs = 0.5), 1)
round(quantile(uncertainty, probs = 0.5), 2)
round(quantile(uncertainty, probs = 0.5), 2) * 100
